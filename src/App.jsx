import {useState} from "react";import Player from "./components/Player.jsx";import GameBoard from "./components/GameBoard.jsx";import Log from "./components/Log.jsx";import {WINNING_COMBINATIONS} from "./winning-combinations.js";import GameOver from "./components/GameOver.jsx";const PLAYERS = {    X: 'Player 1',    O: 'Player 2'}const INITIAL_GAME_BOARD = Array.from(    {length: 3},    () => Array(3).fill(null));/** * Get the current player based on the turns array * @param turns * @returns {string} */function getCurrentPlayer(turns) {    let currentPlayer = 'X';    // Check ths latest player in the turns array    if (turns.length > 0 && turns[0].player === 'X') {        currentPlayer = 'O';    }    return currentPlayer;}function buildGameBoard(gameTurns) {    /* Create a deep copy instead of updating the original array */    const gameBoard = structuredClone(INITIAL_GAME_BOARD);    for (const turn of gameTurns) {        const {player, square} = turn;        const {row, col} = square;        gameBoard[row][col] = player;    }    return gameBoard;}function deriveWinner(gameBoard, players) {    /* A winning combination is make of 3 squares */    for (const combination of WINNING_COMBINATIONS) {        const firstSquareSymbol = gameBoard[combination[0].row][combination[0].col];        const secondSquareSymbol = gameBoard[combination[1].row][combination[1].col];        const thirdSquareSymbol = gameBoard[combination[2].row][combination[2].col];        if (firstSquareSymbol && firstSquareSymbol === secondSquareSymbol && firstSquareSymbol === thirdSquareSymbol) {            return players[firstSquareSymbol];        }    }    return null;}function App() {    const [players, setPlayers] = useState(PLAYERS);    const [gameTurns, setGameTurns] = useState([]);    /* Use some helper functions to "derive state" from gameTurns */    const currentPlayer = getCurrentPlayer(gameTurns);    const gameBoard = buildGameBoard(gameTurns);    const winner = deriveWinner(gameBoard, players);    const hasDraw = gameTurns.length === 9 && !winner;    function handleSelectSquare(rowIndex, colIndex) {        setGameTurns(prevTurns => {            // Reminder: It's important to derive state from the previous state when setting new state values            const currentPlayer = getCurrentPlayer(prevTurns);            return [{                player: currentPlayer,                square: {                    row: rowIndex,                    col: colIndex                }            }, ...prevTurns];        });    }    function handlePlayerNameChange(symbol, name) {        setPlayers(prevPlayers => {            return {                ...prevPlayers,                [symbol]: name            }        });    }    return (        <main>            <div id="game-container">                <ol id="players" className="highlight-player">                    <Player name={PLAYERS.X} symbol="X" isActive={currentPlayer === 'X'}                            onChangeName={handlePlayerNameChange}/>                    <Player name={PLAYERS.O} symbol="O" isActive={currentPlayer === 'O'}                            onChangeName={handlePlayerNameChange}/>                </ol>                {(winner || hasDraw) && <GameOver winner={winner} restart={() => setGameTurns([])}/>}                <GameBoard                    onSelectSquare={handleSelectSquare}                    board={gameBoard}                />            </div>            <Log turns={gameTurns}/>        </main>    )}export default App